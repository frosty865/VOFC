import React, { useState, useEffect } from 'react';

const AddVulnerabilityForm = ({ categories, onVulnerabilityAdded }) => {
  const [formData, setFormData] = useState({
    category: '',
    standard: '',
    type: 'vulnerabilities',
    condition: '',
    issue: '',
    description: '',
    action: '',
    severity: 'medium',
    standards: '',
    business_impact: {
      property: '',
      people: '',
      business: ''
    }
  });
  const [standards, setStandards] = useState([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState('');

  useEffect(() => {
    if (formData.category) {
      fetchStandards(formData.category);
    } else {
      setStandards([]);
    }
  }, [formData.category]);

  const fetchStandards = async (categoryId) => {
    try {
      const response = await fetch(`/api/categories/${categoryId}/standards`);
      if (response.ok) {
        const data = await response.json();
        setStandards(data);
      }
    } catch (error) {
      console.error('Error fetching standards:', error);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    if (name.startsWith('business_impact.')) {
      const field = name.split('.')[1];
      setFormData(prev => ({
        ...prev,
        business_impact: {
          ...prev.business_impact,
          [field]: value
        }
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: value
      }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setMessage('');

    try {
      // Prepare the data for submission
      const submissionData = {
        category: formData.category,
        standard: formData.standard,
        type: formData.type,
        data: {
          condition: formData.condition,
          issue: formData.issue,
          description: formData.description,
          action: formData.action,
          severity: formData.severity,
          standards: formData.standards ? formData.standards.split(',').map(s => s.trim()) : [],
          business_impact: {
            property: formData.business_impact.property || undefined,
            people: formData.business_impact.people || undefined,
            business: formData.business_impact.business || undefined
          }
        }
      };

      // Remove undefined business impact fields
      Object.keys(submissionData.data.business_impact).forEach(key => {
        if (submissionData.data.business_impact[key] === undefined) {
          delete submissionData.data.business_impact[key];
        }
      });

      const response = await fetch('/api/vulnerabilities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(submissionData),
      });

      if (response.ok) {
        setMessage('Vulnerability added successfully!');
        setFormData({
          category: '',
          standard: '',
          type: 'vulnerabilities',
          condition: '',
          issue: '',
          description: '',
          action: '',
          severity: 'medium',
          standards: '',
          business_impact: {
            property: '',
            people: '',
            business: ''
          }
        });
        setStandards([]);
        onVulnerabilityAdded();
      } else {
        const errorData = await response.json();
        setMessage(`Error: ${errorData.error}`);
      }
    } catch (error) {
      setMessage(`Error: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h2>Add New Vulnerability</h2>
      <form onSubmit={handleSubmit}>
        <div className="form-group">
          <label htmlFor="category">Category:</label>
          <select
            id="category"
            name="category"
            value={formData.category}
            onChange={handleInputChange}
            required
          >
            <option value="">Select a category...</option>
            {categories.map(cat => (
              <option key={cat.id} value={cat.id}>{cat.name}</option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label htmlFor="standard">Standard:</label>
          <select
            id="standard"
            name="standard"
            value={formData.standard}
            onChange={handleInputChange}
            required
            disabled={!formData.category}
          >
            <option value="">Select a standard...</option>
            {standards.map(std => (
              <option key={std.id} value={std.id}>{std.name}</option>
            ))}
          </select>
        </div>

        <div className="form-group">
          <label htmlFor="type">Type:</label>
          <select
            id="type"
            name="type"
            value={formData.type}
            onChange={handleInputChange}
            required
          >
            <option value="vulnerabilities">Vulnerability</option>
            <option value="enhancements">Enhancement</option>
            <option value="sustainments">Sustainment</option>
          </select>
        </div>

        <div className="form-group">
          <label htmlFor="condition">Condition:</label>
          <input
            type="text"
            id="condition"
            name="condition"
            value={formData.condition}
            onChange={handleInputChange}
            required
            placeholder="e.g., empty, no, yes, etc."
          />
        </div>

        <div className="form-group">
          <label htmlFor="issue">Issue:</label>
          <input
            type="text"
            id="issue"
            name="issue"
            value={formData.issue}
            onChange={handleInputChange}
            required
            placeholder="Brief description of the issue"
          />
        </div>

        <div className="form-group">
          <label htmlFor="description">Description:</label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleInputChange}
            required
            placeholder="Detailed description of the issue"
          />
        </div>

        <div className="form-group">
          <label htmlFor="action">Action:</label>
          <textarea
            id="action"
            name="action"
            value={formData.action}
            onChange={handleInputChange}
            required
            placeholder="Recommended action to address the issue"
          />
        </div>

        <div className="form-group">
          <label htmlFor="severity">Severity:</label>
          <select
            id="severity"
            name="severity"
            value={formData.severity}
            onChange={handleInputChange}
            required
          >
            <option value="high">High</option>
            <option value="medium">Medium</option>
            <option value="low">Low</option>
            <option value="positive">Positive</option>
          </select>
        </div>

        <div className="form-group">
          <label htmlFor="standards">Standards (comma-separated):</label>
          <input
            type="text"
            id="standards"
            name="standards"
            value={formData.standards}
            onChange={handleInputChange}
            placeholder="e.g., SAFE V2.2 Physical Security Standards, NFPA 101"
          />
        </div>

        <h3>Business Impact (Optional)</h3>
        <div className="form-group">
          <label htmlFor="business_impact.property">Property Impact:</label>
          <textarea
            id="business_impact.property"
            name="business_impact.property"
            value={formData.business_impact.property}
            onChange={handleInputChange}
            placeholder="Impact on property/assets"
          />
        </div>

        <div className="form-group">
          <label htmlFor="business_impact.people">People Impact:</label>
          <textarea
            id="business_impact.people"
            name="business_impact.people"
            value={formData.business_impact.people}
            onChange={handleInputChange}
            placeholder="Impact on people/guests/staff"
          />
        </div>

        <div className="form-group">
          <label htmlFor="business_impact.business">Business Impact:</label>
          <textarea
            id="business_impact.business"
            name="business_impact.business"
            value={formData.business_impact.business}
            onChange={handleInputChange}
            placeholder="Impact on business operations"
          />
        </div>

        <button type="submit" className="btn-primary" disabled={loading}>
          {loading ? 'Adding...' : 'Add Vulnerability'}
        </button>

        {message && (
          <div style={{ marginTop: '1rem', padding: '0.5rem', backgroundColor: message.includes('Error') ? '#ffebee' : '#e8f5e8', border: '1px solid #ccc', borderRadius: '4px' }}>
            {message}
          </div>
        )}
      </form>
    </div>
  );
};

export default AddVulnerabilityForm;
